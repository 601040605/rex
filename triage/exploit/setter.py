import logging

l = logging.getLogger("triage.exploit.setter")

class Setter(object):
    '''
    Exploit wrapper for setting a particular register
    '''

    # this prototype totally has to chain to support both ROP and Shellcode
    def __init__(self, register, exploit_state):
        '''
        :param exploit_state: SimState which causes the exploit to occur
            everything should be setup but the value 
        '''
        self.bypasses_nx = False
        self.bypasses_aslr = False

        self.register = register
        self.exploit_state = exploit_state

    def payload(self, pc, val):
        raise NotImplemented

class ROPSetter(Setter):
    '''
    Exploit which uses ROP to set a register
    '''
    
    def __init__(self, register, exploit_state, chain_addr, chain):
        '''
        :param chain_addr: address the chain must be placed for exploitation
        :param chain: RopChain object to use as the register setting chain
        '''
        super(ROPSetter, self).__init__(register, exploit_state)
        self.bypasses_nx = True

        self.chain_addr = chain_addr
        self.chain = chain

    def payload(self, ip, val):
        # Sall's ugly hack of setting a register arbitrarily given a value

        # append the requested ip to the chain
        chain_cp = self.chain.copy() 
        chain_cp.add_value(self.exploit_state.BVV(ip))

        cbvv = self.exploit_state.BVV(chain_cp.payload_str(base_addr=val))

        cp = self.exploit_state.copy()
        cp.add_constraints(cp.memory.load(self.chain_addr, chain_cp.payload_len) == cbvv)
        return cp.posix.dumps(0)

class ShellcodeSetter(Setter):
    '''
    Exploit which uses shellcode to set a register
    '''

    def __init__(self, register, exploit_state, shellcode, value_idx): 
        
        super(ShellcodeSetter, self).__init__(register, exploit_state)

        self.shellcode = shellcode
        self.value_idx = value_idx

    def payload(self, ip, val):
        '''
        slice into the shellcode and set val to the right register
        '''

        # TODO
