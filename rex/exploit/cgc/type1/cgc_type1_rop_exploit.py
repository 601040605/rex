from rex import CannotExploit
from rex.exploit.cgc import CGCType1Exploit

class CGCType1RopExploit(CGCType1Exploit):
    '''
    A CGC type1 exploit object, which sets a register via Rop.
    '''

    def __init__(self, crash, register, chain_addr, chain, value_var):
        '''
        :param crash: a crash object which has been modified to exploit a vulnerability
        :param register: the register set by the exploit
        :param chain_addr: address to place the chain in target's memory
        :param chain: angrop chain object to insert
        :param value_var: the claripy variable used to determine the position in the payload which contains the value
        '''
        super(CGCType1RopExploit, self).__init__(crash, register, bypasses_nx=True, bypasses_aslr=True,
                                                 reg_bitmask=0xffffffff, ip_bitmask=0xffffffff)

        self.method_name = 'rop'
        # TODO: determine payload index of the value and final ip index
        self._chain_addr = chain_addr
        self._chain = chain
        self._value_var = value_var

        self._determine_indices()

    def __str__(self):
        return "<%s> rop type1" % self.register

    def _get_chain_with_value(self, value):
        c_str = self._chain.payload_str(constraints=(self._value_var==value))
        c_bvv = self.crash.state.se.BVV(c_str)

        s = self.crash.state.copy()
        c_mem = s.memory.load(self._chain_addr, len(c_str))

        if not s.se.satisfiable(extra_constraints=(c_mem == c_bvv,)):
            raise CannotExploit("chain cannot contain arbitrary bytes for value")

        s.add_constraints(c_mem == c_bvv)
        return s.posix.dumps(0)

    def _determine_indices(self):

        # find value index
        c1 = self._get_chain_with_value(0x41414141)
        # used as the basis for the bytearray in the exploit script
        self._raw_payload = c1
        c2 = self._get_chain_with_value(0x58585858)

        # find out at what index difference the value exists in the payload
        # TODO: MAKE THIS WAY MORE ROBUST, THE VALUE IN THE PAYLOAD WILL NOT NECESSARILY BE 'AAAA'

        # find out at what index difference the value exists in the payload
        for i in xrange(len(c1)-3):
            if all(x != y for (x, y) in zip(c1[i:i+4], c2[i:i+4])):
                self.value_idx = i
                break

        if self.value_idx is None:
            raise CannotExploit("unable to find value index in payload string")

        # find final_ip index
        w_str = self._chain.payload_str(constraints=(self._value_var==0x41414141))
        w_bvv = self.crash.state.se.BVV(w_str)

        w_state = self.crash.state.copy()

        w_mem = w_state.memory.load(self._chain_addr, len(w_str))
        w_state.add_constraints(w_mem == w_bvv)

        w_state1 = self._windup_state(w_state)
        w_state2 = w_state1.copy()

        w_state1.add_constraints(w_state1.regs.pc == 0x61616161)
        w_state2.add_constraints(w_state2.regs.pc == 0x78787878)

        w1 = w_state1.posix.dumps(0)
        w2 = w_state2.posix.dumps(0)

        for i in xrange(len(w1)-3):
            if all(x != y for (x, y) in zip(w1[i:i+4], w2[i:i+4])):
                self.final_ip_idx = i
                break

        if self.final_ip_idx is None:
            raise CannotExploit("unable to find final ip index in payload string")
