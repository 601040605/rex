from rex.exploit import CannotExploit
from rex.exploit.cgc import CGCType1Exploit

class CGCType1RopExploit(CGCType1Exploit):
    '''
    A CGC type1 exploit object, which sets a register via Rop.
    '''

    def __init__(self, crash, register, ch_mem, value_var, ip_var):
        '''
        :param crash: a crash object which has been modified to exploit a vulnerability
        :param register: the register set by the exploit
        :param ch_mem: memory representing the chain in memory
        :param value_var: claripy variable representing the value to set
        :param ip_var: claripy variable representing the ip to set
        '''
        super(CGCType1RopExploit, self).__init__(crash, register,
                bypasses_nx=True, bypasses_aslr=True,
                reg_bitmask=0xffffffff, ip_bitmask=0xffffffff)

        self.method_name = 'rop'
        # TODO: determine payload index of the value and final ip index

        self._mem = ch_mem
        self._arg_vars = [value_var, ip_var]

        self._value_var_idx = len(self._mem.variables) + 2
        self._ip_var_idx = len(self._mem.variables) + 3

        self._generate_formula()

    def __str__(self):
        return "<%s> rop type1" % self.register
