from rex.exploit.cgc import CGCType1Exploit

class CGCType1CircumstantialExploit(CGCType1Exploit):
    '''
    A CGC type1 exploit object, which sets a register via Rop.
    '''

    def __init__(self, crash, register):
        '''
        :param crash: a crash object which has been modified to exploit a vulnerability
        :param register: the register set by the exploit
        :param value_var: the claripy variable used to determine the position in the payload which contains the value
        '''
        super(CGCType1CircumstantialExploit, self).__init__(crash, register, bypasses_nx=True, bypasses_aslr=True)

        self._determine_indices()

    def _get_payload_with_values(self, register_val, ip_val):
        '''
        return a payload string which sets self.register to register_val and sets ip to ip_val
        :param register_val: value to set self.register
        :param ip_val: value to set ip
        '''

        cs = self.crash.state.copy()

        reg = getattr(cs.regs, self.register)
        cs.add_constraints(reg == register_val)

        cs.add_constraints(cs.regs.ip == ip_val)

        return cs.posix.dumps(0)

    def _determine_indices(self):

        # find value index
        c1 = self._get_payload_with_values(0x41414141, 0x11223344)
        # used as the basis for the bytearray in the exploit script
        self._raw_payload = c1
        c2 = self._get_payload_with_values(0x58585858, 0x11223344)

        # find out at what index difference the value exists in the payload
        for i in xrange(len(c1)):
            if c1[i] != c2[i]:
                self.value_idx = i
                break

        if self.value_idx is None:
            raise Exception("unable to find value index in payload string")

        # find final_ip index
        w1 = self._get_payload_with_values(0x11223344, 0x41414141)
        w2 = self._get_payload_with_values(0x11223344, 0x58585858)

        for i in xrange(len(w1)):
            if w1[i] != w2[i]:
                self.final_ip_idx = i
                break

        if self.final_ip_idx is None:
            raise Exception("unable to find final ip index in payload string")
