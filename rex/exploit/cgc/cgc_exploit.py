from rex.exploit import Exploit
import compilerex

class CGCExploit(Exploit):
    '''
    A CGC exploit object, offers more flexibility than an Exploit object for the sake of the game.
    https://github.com/CyberGrandChallenge/cgc-release-documentation/blob/master/walk-throughs/understanding-cfe-povs.md
    '''

    def __init__(self, crash, cgc_type, bypasses_nx, bypasses_aslr):
        super(CGCExploit, self).__init__(crash, bypasses_nx, bypasses_aslr)

        self.cgc_type = cgc_type
        self._raw_payload = None

    ### DUMPING

    def dump(self, filename=None):
        '''
        dumps a CGC exploit.

        XXX: just python script for now.
        '''

        return self.dump_python(filename)

    def dump_python(self, filename=None):

        raise NotImplementedError("It is the responsibility of subclasses to implement this method")

    def dump_c(self, filename=None):

        raise NotImplementedError("It is the responsibility of subclasses to implement this method")

    def dump_binary(self, filename=None):
        c_code = self.dump_c()
        compiled_result = compilerex.compile_from_string(c_code, filename=filename)
        return compiled_result

    ### TESTING

    def test(self):

        raise NotImplementedError("It is the responsibility of subclasses to implement this method")
