
class CGCType1ExploitMaster(object):
    '''
    Holds multiple exploits for CGC Type1 exploits, should contain a CGCType1Exploit for every register we're able to set
    '''

    def __init__(self, registers):
        '''
        :param registers: dictionary of registers that can be controlled and exploits which set the registers
        '''

        self.controlled_registers = registers.keys()
        self.register_mapping = registers

    def dump(self, register=None, filename=None):
        '''
        dump an exploit for setting a given register
        :param register: set this register with exploit
        '''

        if register is None:
            if len(self.controlled_registers):
                register = self.controlled_registers[0]
            else:
                raise Exception("no controllable registers")

        return self.register_mapping[register].dump(filename)

    def can_control(self, register):
        '''
        test whether we can set a given register
        :param register: register to query control over
        '''

        return register in self.controlled_registers
