import os
import angr

from rex import Vulnerability
from rex.exploit import Exploit

import logging
l = logging.getLogger("rex.exploit.linux.LinuxExploit")

class NonExploitableCrash(Exception):
    pass

class CannotExploit(Exception):
    pass

class CannotBypassNX(CannotExploit):
    pass

class ImproperCircumstances(CannotExploit):
    pass

class LinuxExploit(Exploit):
    '''
    Exploit object which can leak flags or set registers
    '''

    def __init__(self, crash, use_rop_cache=True, rop_cache_file=None):
        '''
        :param crash: an exploitable crash object
        :param use_rop_cache: should rop gadgets be cached?
        :param rop_cache_file: which filename to use for a rop cache
        '''
        super(LinuxExploit, self).__init__(crash, use_rop_cache, rop_cache_file)

        self.shell = None

    def initialize(self):

        super(LinuxExploit, self).initialize()

        self._generate_shell()

    def shell(self):
        '''
        :return: a payload which will spawn an interactive shell
        '''

        return self.shell

    def any_control(self):
        '''
        does this exploit offer anything?
        '''

        return self.shell is not None

### EXPLOIT GENERATORS

    def _generate_shell(self):
        '''
        generate and set the shell dropper
        '''

        try:
            self.shell = self._generate_a_shell()
        except CannotExploit:
            l.warning("cannot generate a shell dropper exploit")

    def _generate_a_shell(self):
        pass
    
