from rex.exploit import CannotExploit, ExploitFactory

import logging
l = logging.getLogger("rex.exploit.cgc.cgc_exploit_factory")

class CGCExploitFactory(ExploitFactory):
    '''
    Exploit factory for CGC challenges
    '''

    def __init__(self, crash):
        '''
        :param crash: an exploitable crash object
        '''
        super(CGCExploitFactory, self).__init__(crash)

        # mapping of register names to type1 exploit objects
        self.register_setters = { }

        # a type2 exploit object
        self.leaker = None

    def dump_type1(self, register=None):
        '''
        dump a type1 exploit
        :param register: option register to set
        '''

        raise NotImplementedError("coming soon")

    def dump_type2(self):
        '''
        dump a type2 exploit
        '''

        raise NotImplementedError("coming soon")

    def can_control(self, register):
        '''
        can we control the register specified by register.
        :param register:
        '''

        return register in self.register_setters.keys()

    def initialize(self):

        l.info("accumulating rop gadgets")

        self.rop.find_gadgets()

        for technique in Techniques[self.os]:
            p = technique(self.crash, self.rop, self.shellcode)
            try:
                l.debug("applying technique %s", p.name)
                result = p.apply()
                if p.pov_type == 1 and len(result) > 0:
                    self.register_setters.update(result)
                elif p.pov_type == 2:
                    self.leaker = result
            except CannotExploit as e:
                l.debug("technique failed: %s", e.message)

from .techniques import Techniques
