import logging
from rex.exploit import Shellcodes, NoSuchShellcode

l = logging.getLogger("rex.exploit.shellcode_manager")

class ShellcodeManager(object):
    '''
    Shellcode manager object, manages preferences for shellcode types and in the future, their options
    '''

    DEFAULT_SHELLCODES = {'cgc': 'set_register', 'unix': 'binsh'}

    def __init__(self, project):
        '''
        :param project: a project option to base shellcode retrieve decisions off of
        '''
        self.os = project.loader.main_bin.os
        self.arch = project.arch.name
        self.default = dict(ShellcodeManager.DEFAULT_SHELLCODES)

    def get_default(self):
        '''
        retrieve the default shellcode as a raw string
        '''
        payload = self.default[self.os]
        return Shellcodes[self.os][self.arch][payload].decode('hex')

    def set_default(self, new_default):
        '''
        set a new default shellcode
        '''
        self.default[self.os] = new_default

    def get_shellcode(self, payload_name):
        '''
        grab a shellcode with a known name
        '''
        try:
            code = Shellcodes[self.os][self.arch][payload_name]
        except KeyError:
            raise NoSuchShellcode("shellcode by name '%s' for os '%s' and arch '%s'" % (self.os, self.arch, payload_name))
        return code.decode('hex')
